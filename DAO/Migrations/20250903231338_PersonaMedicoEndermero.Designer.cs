// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(dbContextINA))]
    [Migration("20250903231338_PersonaMedicoEndermero")]
    partial class PersonaMedicoEndermero
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.clsActivos", b =>
                {
                    b.Property<int>("IdActivo")
                        .HasColumnType("int");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDisponible");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaAdquisicion")
                        .HasColumnType("date");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("NombreActivo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdActivo");

                    b.HasIndex("IdCategoria");

                    b.ToTable("tbActivos");
                });

            modelBuilder.Entity("Entities.clsCategoriaActivos", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdCategoria");

                    b.ToTable("tbCategoriasActivos");
                });

            modelBuilder.Entity("Entities.clsDepartamentos", b =>
                {
                    b.Property<int>("idDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDepartamento"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descripcionDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fecha_crea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fecha_ult_mod")
                        .HasColumnType("datetime2");

                    b.Property<string>("usuario_crea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("usuario_ult_mod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idDepartamento");

                    b.ToTable("tbDepartamento");
                });

            modelBuilder.Entity("Entities.clsDevolucion", b =>
                {
                    b.Property<int>("IdDevolucion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDevolucion"));

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("date");

                    b.Property<int>("IdActivoFK")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdDevolucion");

                    b.HasIndex("IdActivoFK");

                    b.ToTable("tbDevolucion");
                });

            modelBuilder.Entity("Entities.clsDonacion", b =>
                {
                    b.Property<int>("IdDonacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDonacion"));

                    b.Property<DateTime>("FechaDonacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDonante")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDonacion")
                        .HasColumnType("int");

                    b.HasKey("IdDonacion");

                    b.HasIndex("IdDonante");

                    b.ToTable("tbDonaciones");
                });

            modelBuilder.Entity("Entities.clsDonacionActivo", b =>
                {
                    b.Property<int>("IdDonacionActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDonacionActivo"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoActivo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdActivo")
                        .HasColumnType("int");

                    b.Property<int>("IdDonacion")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDonacionActivo");

                    b.HasIndex("IdActivo");

                    b.HasIndex("IdDonacion");

                    b.ToTable("tbDonacionesActivos");
                });

            modelBuilder.Entity("Entities.clsDonacionDinero", b =>
                {
                    b.Property<int>("IdDonacionDinero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDonacionDinero"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Frecuencia")
                        .HasColumnType("int");

                    b.Property<int>("IdDonacion")
                        .HasColumnType("int");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoTransaccion")
                        .HasColumnType("int");

                    b.HasKey("IdDonacionDinero");

                    b.HasIndex("IdDonacion")
                        .IsUnique();

                    b.ToTable("tbDonacionesDinero");
                });

            modelBuilder.Entity("Entities.clsDonante", b =>
                {
                    b.Property<int>("IdDonante")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.HasKey("IdDonante");

                    b.ToTable("tbDonantes");
                });

            modelBuilder.Entity("Entities.clsEnfermero", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.Property<string>("area")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("fecha_crea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fecha_ult_mod")
                        .HasColumnType("datetime2");

                    b.Property<int>("idPersona")
                        .HasColumnType("int");

                    b.Property<string>("usuario_crea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("usuario_ult_mod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id", "tipoId");

                    b.ToTable("tbEnfermero");
                });

            modelBuilder.Entity("Entities.clsEspecialidadMedica", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("tbEspecialidadesMedicas");
                });

            modelBuilder.Entity("Entities.clsMedico", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.Property<string>("especialidad")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("fecha_crea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fecha_ult_mod")
                        .HasColumnType("datetime2");

                    b.Property<int>("idPersona")
                        .HasColumnType("int");

                    b.Property<string>("usuario_crea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("usuario_ult_mod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id", "tipoId");

                    b.ToTable("tbMedico");
                });

            modelBuilder.Entity("Entities.clsPersona", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.Property<int>("DonanteIdDonante")
                        .HasColumnType("int");

                    b.Property<string>("apellido1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("apellido2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("fechaNac")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id", "tipoId");

                    b.HasIndex("DonanteIdDonante");

                    b.ToTable("tbPersonas");
                });

            modelBuilder.Entity("Entities.clsPuestos", b =>
                {
                    b.Property<int>("idPuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPuesto"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("fecha_crea")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fecha_ult_mod")
                        .HasColumnType("datetime2");

                    b.Property<int>("idDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("motivoInactivo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("usuario_crea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("usuario_ult_mod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idPuesto");

                    b.HasIndex("idDepartamento");

                    b.ToTable("tbPuestos");
                });

            modelBuilder.Entity("Entities.clsActivos", b =>
                {
                    b.HasOne("Entities.clsCategoriaActivos", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Entities.clsDevolucion", b =>
                {
                    b.HasOne("Entities.clsActivos", "Activo")
                        .WithMany("Devoluciones")
                        .HasForeignKey("IdActivoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activo");
                });

            modelBuilder.Entity("Entities.clsDonacion", b =>
                {
                    b.HasOne("Entities.clsDonante", "Donante")
                        .WithMany()
                        .HasForeignKey("IdDonante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donante");
                });

            modelBuilder.Entity("Entities.clsDonacionActivo", b =>
                {
                    b.HasOne("Entities.clsActivos", "Activo")
                        .WithMany("DonacionActivos")
                        .HasForeignKey("IdActivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.clsDonacion", "Donacion")
                        .WithMany("DonacionActivos")
                        .HasForeignKey("IdDonacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activo");

                    b.Navigation("Donacion");
                });

            modelBuilder.Entity("Entities.clsDonacionDinero", b =>
                {
                    b.HasOne("Entities.clsDonacion", "Donacion")
                        .WithOne("DonacionDinero")
                        .HasForeignKey("Entities.clsDonacionDinero", "IdDonacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donacion");
                });

            modelBuilder.Entity("Entities.clsEnfermero", b =>
                {
                    b.HasOne("Entities.clsPersona", "persona")
                        .WithOne()
                        .HasForeignKey("Entities.clsEnfermero", "id", "tipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("persona");
                });

            modelBuilder.Entity("Entities.clsMedico", b =>
                {
                    b.HasOne("Entities.clsPersona", "persona")
                        .WithOne()
                        .HasForeignKey("Entities.clsMedico", "id", "tipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("persona");
                });

            modelBuilder.Entity("Entities.clsPersona", b =>
                {
                    b.HasOne("Entities.clsDonante", "Donante")
                        .WithMany()
                        .HasForeignKey("DonanteIdDonante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donante");
                });

            modelBuilder.Entity("Entities.clsPuestos", b =>
                {
                    b.HasOne("Entities.clsDepartamentos", "Departamento")
                        .WithMany("Puestos")
                        .HasForeignKey("idDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Entities.clsActivos", b =>
                {
                    b.Navigation("Devoluciones");

                    b.Navigation("DonacionActivos");
                });

            modelBuilder.Entity("Entities.clsDepartamentos", b =>
                {
                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("Entities.clsDonacion", b =>
                {
                    b.Navigation("DonacionActivos");

                    b.Navigation("DonacionDinero")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
